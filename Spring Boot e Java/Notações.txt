Anotações importantes:
@RestController = Define que a classe é uma controladora REST.
@ResponseBody = Define que  a função irá retornar uma resposta à requisição.
@RequestMapping("/cozinhas") = Definindo rota do controlador
@RequestMapping(value = "/estados", produces = MediaType.APPLICATION_JSON_VALUE) = Define que todas os métodos do controlador só produzem JSON.
@GetMapping ou @GetMappiing("/rota_desejada") = Define que o método retorna um verbo GET.              
@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE) = Definindo que a rota só retorna o tipo JSON, MediaType é um ENUM, caso queira passar mais de um tipo:
@GetMapping(produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})

Injeção de depêndencia:
@Autowired = Ela é usada em conjunto com a inversão de controle (IoC) e a injeção de dependência, onde o framework Spring gerencia as dependências entre as classes. Ao usar a anotação @Autowired, o Spring procura por uma instância da classe desejada no contexto da aplicação e a injeta automaticamente na classe onde a anotação está presente.

Desambiguação de BEANS
@Primary = Caso tenha dois beans implementados por uma só interface, com essa anotaçãoo conseguimos definir quem terá prioridade na hora de ser injetado.
@Qualifier("nome_desejado") = Serve para qualificar um bean, na hora de ser injetado também deve-se colocar junto com o @AutoWired.
@Profile("nome_desejado") = Serve para diferenciar vários tipos de ambientes, para funcionar no application.properties deve-se adicionar a propriedade: spring.profiles.active=NOME_DESEJADO

Ciclo de vida dos bens
@PostConstruct = Executa algo após o bean ser construido
@PreDestroy = Executa algo antes do bean ser destruido 


Sobre listener
@EventListener = É usada para indicar que um método deve ser registrado como um ouvinte de eventos em um aplicativo. Quando um evento é publicado pelo aplicativo, todos os métodos anotados com @EventListener que correspondem ao tipo de evento são executados.

Recuperar variável do application.properties
@Value("${nome_da_propriedade}")
private String nome_da_propriedade;

Sobre JPA 
@PersistenceContext = É usado injetar o EntityManager diretamente no seu código sem precisar criar uma nova instância a cada vez que precisar acessar o banco de dados. Em resumo, essa anotação é usada para gerenciar o ciclo de vida das entidades JPA em seu aplicativo e simplificar o acesso ao banco de dados.
@Transactional = É usada para indicar que um método ou classe deve ser executado dentro de uma transação. Transações são usadas para garantir que um conjunto de operações de banco de dados seja executado como uma unidade atômica - ou seja, ou todas as operações são executadas com sucesso, ou nenhuma delas é executada.


Hibernate
@UpdateTimestamp = Define que o campo será atualizado toda ver que um recurso irá ser atualizado.
@CreationTimestamp = Define que o campo será atualizado quando o recurso for criado.


Loombok 
@EqualsAndHashCode(onlyExplicitlyIncluded = true) = Criar hashcode e equals somente dos atributos que tiverem a notação @EqualsAndHashCode.Include em cima.
@Getter = Deixa implicito todos os getters da classe.
@Setter = Deixa implicito todos os setters da classe.
@EqualsAndHashCode = Deixa implicito todos os Equals e Hash code da classe.
@Data = Deixa implicito todos os getters setters hascode equals e toString da classe.

Jackson
@JacksonXmlRootElement(localName = "NOME_DESEJADO") =  Serve para alterar o elemento raiz da representação do XML.
@JacksonXmlProperty(localName = "NOME_DESEJADO") = Altera o nome da propriedade no XML.
@JacksonXmlElementWrapper(useWrapping = false) = Desabilita o embrulho da propriedade no XML.


Entidades
@Entity = Anota que a classe é uma entidade.

Atributos entidades:
@Id = Anota que é uma primary key.
@GeneratedValue(strategy = GenerationType.IDENTITY) = Anota que a primeira key vai ser auto-incremento.
@ManyToOne = Relacionamento muitos para um de tabela.
@JoinColumn(name = "entidade_id") = Dizer que o atributo é uma referencia a uma outra entidade e nomear ele.
@Column(nullable = false) ||  @JoinColum(nullable = false) = Quer dizer que a coluna não aceita nulo.
@JsonProperty("nome_desejado") = Altera o nome na representação do JSON.
@JsonIgnore = Não mostra o atributo na representação do JSON.