Constraints REST:
	Cliente-servidor:
	Stateless: Servidor não guarda histórico de uso.
	Cache: Exemplo lista de cidades, não altera constantemente então podemos guardar em cache para diminuir o 
	número de hits no servidor.
	Interface Uniforme: Conjunto de operações bem definidas do sistema.
	Sistema em camadas: Possibilidade entre o cliente e o servidor terem outros servidores intermediarios.
	Codigo sob demanda: Servidor pode enviar como resposta algum código para ser executado no cliente. 
	(Pouco usado).

REST e RESTful:
	Rest: É o estilo arquitetural que possui as constraints rest é a especificação.
	RESTful: É uma API desenvolvida com as conformidades REST (Segue todos os padrões religiosamente).
	
Recursos REST: A forma do cliente interagir com o servidor é através de um recurso (Podemos pensar em orientação
	a objetos como se um recurso fosse um objeto ou uma coleção deles).
	
	
Puristas X Pragmáticos:
	Puristas: Defendem que REST api devem seguir todas as constraints sem excessão.
	Pragmáticos: Seguem as constraints com excessões, para tornar o uso mais simples.

Protocolo HTTP: 
			Requisição
	Cliente -------------> Servidor
	Cliente <------------- Servidor
			Resposta
	
	GET /users/lucasbref82/repos
	Host: api.github.com
	Accept: application/json
	User-Agent: lucasbref82
	
URI X URL:															      URI					
	URI: Quando modelamos nossa API pensamos em URI para localizarmos um recurso. (localhost:8080/produtos)
														  URL
	URL: É uma URI, porém identifica também onde o recurso está. (localhost:8080/produtos)

Idempotente X Não Idempotente:
	GET: É um método idempotente, pode ser aplicadas várias vezes sem que o valor do resultado se altere após a aplicação inicial.
	POST: Não é idempotente, pois cada vez que a operação for aplicada o resultado será alterado (Irá criar um novo objeto).
	PUT: O objeto tem que ser alterado como um todo, caso não passemos alguma propriedade ela será considerada como nula. (Pode ser usado para criar um 	novo recurso).
	PATCH: É um método idempotente, o estado da aplicação continua o mesmo (Serve para alterar parte de um recurso).
	DELETE: É um metodo idempotente, o estado da aplicação continua o mesmo (Serve para deletar um recurso).
	HEAD: Serve para buscar somente os cabeçalhos das requisições.
	OPTIONS: Serve para buscar as opções de métodos disponiveis no recurso.

Status HTTP:
	Status de sucesso:
		200: Ok
		201: Created
		204: No Content
	Status de redirecionamento:
		301: Moved permanently (Quando é retornado, um cabeçalho location é retornado para indicar o novo local).
		302: Found (Quando é retornado, um cabeçalho location é retornado para indicar o novo local).
	Status de erro por parte do client:
		400: Bad Request
		401: Unauthorized (Significa que não está autenticado).
		403: Forbbiden (Entendeu a requisição, porém não está autorizado)
		404: Not Found
		406: Not Acceptable (Não pode retornar o tipo de representação especificado na requisição).
	
			  